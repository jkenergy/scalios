/* Generated By:JavaCC: Do not edit this line. OILParserTokenManager.java */
package com.jkenergy.rtos.config.parser;
import com.jkenergy.rtos.config.Problem;
import com.jkenergy.rtos.config.oilmodel.*;
import java.math.*;
import java.util.*;

public class OILParserTokenManager implements OILParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffffffff80L) != 0L)
         {
            jjmatchedKind = 51;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x80220080L) != 0L)
            return 1;
         if ((active0 & 0x7ffff7fddff00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1002800a000L) != 0L)
            return 1;
         if ((active0 & 0x7feffd7fd5f00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x1021100440100L) != 0L)
            return 1;
         if ((active0 & 0x6fceeffb95e00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 3;
            }
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x628effaf94a00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0xd40005001400L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x400effff94a00L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x2280000000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0xef2f580800L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 6;
            }
            return 1;
         }
         if ((active0 & 0x40000d0a14200L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0xef55d80000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 7;
            }
            return 1;
         }
         if ((active0 & 0x2a000800L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0xce57980000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x2100400000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0xc652980000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x805000000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x4452900000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 10;
            }
            return 1;
         }
         if ((active0 & 0x8200080000L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x4602100000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x50800000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x4200000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 12;
            }
            return 1;
         }
         if ((active0 & 0x402100000L) != 0L)
            return 1;
         return -1;
      case 13:
         if ((active0 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 15;
            return 1;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 1;
         return -1;
      case 16:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 61);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 58:
         return jjStopAtPos(0, 62);
      case 59:
         return jjStopAtPos(0, 63);
      case 61:
         return jjStopAtPos(0, 64);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1241090400L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x10020808200L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000004001000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x840000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x504108042000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x10004000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x880020000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8000200080L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000800L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000400100000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20000400100L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x280000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 65);
      case 93:
         return jjStopAtPos(0, 66);
      case 123:
         return jjStopAtPos(0, 67);
      case 125:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000400100L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x400100000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x12004800L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x28a000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000400L, active1, 0L);
      case 77:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x1500000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000820808200L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x103400d0000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8202000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x4001000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000000000L);
      case 77:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4240090000L);
      case 82:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x12404900L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x503000000000L);
      case 85:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000800200L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x880200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x400100000L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 75:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x4004200080000L);
      case 77:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x4801200L);
      case 79:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40010004000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x280080200000L);
      case 85:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8028000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 1);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 52:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 1);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10004000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x400100000L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4004800000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x200080000L);
      case 77:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x40010000L);
      case 84:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2c800200L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000800L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x80200000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 1);
         break;
      case 52:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 1);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4002000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x200080000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x40010000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000800200L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 71:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10004000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x80200000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000800L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x100400000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x400100000L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x28000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0xa00080000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000800L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x4050000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x400100000L);
      case 78:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 1);
         break;
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000L);
      case 82:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000800000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x100400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x402100000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x100400000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x2200080000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x50800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 1);
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x8200080000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 79:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 1);
         break;
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x4450900000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x4400100000L);
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 1);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 1);
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x8200080000L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 89:
         return jjMoveStringLiteralDfa10_0(active0, 0x50800000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x400100000L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x50800000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 23, 1);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 30, 1);
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x400100000L);
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 25, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 38, 1);
         break;
      case 89:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(15, 33, 1);
         break;
      case 89:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(17, 34, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 48)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 6:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xbfffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 62 && kind > 55)
                     kind = 55;
                  break;
               case 14:
                  if (curChar == 48 && kind > 56)
                     kind = 56;
                  break;
               case 15:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 27:
                  if (curChar == 47)
                     jjCheckNAddStates(12, 14);
                  break;
               case 28:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 30:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 31:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 42)
                     jjCheckNAddStates(15, 17);
                  break;
               case 35:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 37:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(18, 20);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 12:
                  jjAddStates(21, 22);
                  break;
               case 17:
                  if (curChar == 120)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 28:
                  jjAddStates(12, 14);
                  break;
               case 33:
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  jjCheckNAddTwoStates(36, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 15, 20, 27, 32, 3, 4, 6, 3, 4, 8, 6, 28, 29, 31, 34, 
   35, 37, 5, 7, 9, 12, 13, 24, 25, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\117\123", "\124\101\123\113", 
"\103\117\125\116\124\105\122", "\101\114\101\122\115", "\122\105\123\117\125\122\103\105", 
"\105\126\105\116\124", "\111\123\122", "\115\105\123\123\101\107\105", "\103\117\115", 
"\101\120\120\115\117\104\105", "\116\115", "\111\120\104\125", 
"\101\120\120\114\111\103\101\124\111\117\116", "\123\103\110\105\104\125\114\105\124\101\102\114\105", 
"\117\123\137\124\131\120\105", "\124\101\123\113\137\124\131\120\105", 
"\103\117\125\116\124\105\122\137\124\131\120\105", "\101\114\101\122\115\137\124\131\120\105", 
"\122\105\123\117\125\122\103\105\137\124\131\120\105", "\105\126\105\116\124\137\124\131\120\105", 
"\111\123\122\137\124\131\120\105", "\115\105\123\123\101\107\105\137\124\131\120\105", 
"\103\117\115\137\124\131\120\105", "\101\120\120\115\117\104\105\137\124\131\120\105", 
"\116\115\137\124\131\120\105", "\111\120\104\125\137\124\131\120\105", 
"\101\120\120\114\111\103\101\124\111\117\116\137\124\131\120\105", "\123\103\110\105\104\125\114\105\124\101\102\114\105\137\124\131\120\105", 
"\116\117\137\104\105\106\101\125\114\124", "\101\125\124\117", "\127\111\124\110\137\101\125\124\117", 
"\111\115\120\114\105\115\105\116\124\101\124\111\117\116", "\117\111\114\137\126\105\122\123\111\117\116", "\103\120\125", 
"\124\122\125\105", "\106\101\114\123\105", "\125\111\116\124\63\62", "\111\116\124\63\62", 
"\125\111\116\124\66\64", "\111\116\124\66\64", "\106\114\117\101\124", "\105\116\125\115", 
"\123\124\122\111\116\107", "\102\117\117\114\105\101\116", null, null, null, null, null, null, null, null, 
null, null, "\54", "\72", "\73", "\75", "\133", "\135", "\173", "\175", "\56\56", 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xe9cfffffffffff81L, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[39];
private final int[] jjstateSet = new int[78];
protected char curChar;
public OILParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public OILParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 39; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 70)
   {
      jjmatchedKind = 70;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
