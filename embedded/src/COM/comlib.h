/* Copyright (C) 2004, 2005, 2006 JK Energy Ltd.
 * 
 * $LastChangedDate: 2007-08-18 00:07:58 +0100 (Sat, 18 Aug 2007) $
 * $LastChangedRevision: 464 $
 * $LastChangedBy: markdixon $
 * $HeadURL: http://10.211.55.3/svn/repos/ertcs/rtos/trunk/embedded/src/COM/comlib.h $
 * 
 * Target CPU: 		Generic
 * Target compiler:	Standard ANSI C
 * Visibility:		User
 */

/* This file is externally-visible header file for declaring the API to the COM layer */

#ifndef COMLIB_H_
#define COMLIB_H_

#include <oslib.h>

/* Use unat so that the write can be done atomically */
/* $Req: artf1281 $ */
typedef unat FlagValue;
#define COM_TRUE				(1U)
#define COM_FALSE				(0)


typedef unat COMApplicationModeType;
typedef enum {COM_SHUTDOWN_IMMEDIATE} COMShutdownModeType;

/* Data generated by OIL tool will use sizeof() so must use uint8 data type */
typedef os_block_size COMLengthType;
typedef COMLengthType *LengthRef;
typedef os_block_type *ApplicationDataRef;
typedef const struct com_messagecb *MessageIdentifier;				


/* Defined as integers because StatusType is a shared type with the OS. Would be better
 * for type safety to use an enum, but this would require the OS header file to change
 * whenever a new COM message is introduced, coupling the OS to COM. This would be bad for
 * maintenance.
 */
#define E_COM_ID				(100U)
#define E_COM_LENGTH			(101U)
#define E_COM_LIMIT				(102U)
#define E_COM_NOMSG				(103U)
#define E_COM_SYS_STATE			(104U)	/* Implementation specific defined Status code, indicates COM not started */
#define E_COM_SYS_NOTIFICATION	(105U)	/* Implementation specific defined Status code, indicates receive notification failed */
#define E_COM_SYS_ACCESS		(106U)	/* Implementation specific defined Status code, indicates access from undeclared accessor (Task or ISR) */

/* @TODO artf1312 need to add some more codes E_COM_SYS_xxx for OS API call failures (typically
 * when notifications fail due to activation limits etc.)
 */

/* The function COMErrorGetServiceId() returns service codes named according to the pattern COMServiceId_x $Req artf1269 $ */
typedef enum {
	COMServiceId_SendMessage,
	COMServiceId_StartCOM,
	COMServiceId_StopCOM,
	COMServiceId_ReceiveMessage,
	COMServiceId_ReceiveStreamMessage,
	COMServiceId_SendZeroMessage,
	COMServiceId_SendStreamMessage,
	COMServiceId_GetMessageStatus,
	COMServiceId_GetCOMApplicationMode,
	COMServiceId_StartCOMExtension,
	COMServiceId_InitMessage} COMServiceIdType;

/* Globals to support error hook functions */
union com_param {
	MessageIdentifier SendMessage_Message;
	MessageIdentifier GetMessageStatus_Message;
	MessageIdentifier SendZeroMessage_Message;
	MessageIdentifier ReceiveMessage_Message;
	MessageIdentifier InitMessage_Message;
	MessageIdentifier SendStreamMessage_Message;
	MessageIdentifier ReceiveStreamMessage_Message;
	ApplicationDataRef SendMessage_DataRef;
	ApplicationDataRef SendStreamMessage_DataRef;
	ApplicationDataRef ReceiveStreamMessage_DataRef;
	LengthRef SendStreamMessage_DataSize;
	LengthRef ReceiveStreamMessage_DataSize;
	ApplicationDataRef ReceiveMessage_DataRef;
	ApplicationDataRef InitMessage_DataRef;
	COMShutdownModeType StopCOM_Mode;
	COMApplicationModeType StartCOM_Mode;
};

/* Macros that allow access to parameter values of each API call within the error hook processing */
/* @TODO the union names need to be modified to match the OSEK spec ones (and for the OS too)
 * and for the main API functions to use the same parameter names, since this will keep things
 * consistent and readable.
 * 
 * E.g.
 * 
 * #define COMError_SendMessage_Message()						(com_param1.SendMessage_Message)
 * 
 * and
 * 
 * union com_param {
 *     MessageIdentifier SendMessage_Message;
 *     ....
 * }
 *
 */

/* Up to three parameters in an API call */
extern union com_param com_param1;
extern union com_param com_param2;
extern union com_param com_param3;

/* Global to indicate which API call failed */
extern COMServiceIdType com_serviceid;							/* $Req: artf1269 $ */

#define COMError_SendMessage_Message()							(com_param1.SendMessage_Message)
#define COMError_SendMessage_DataRef()							(com_param2.SendMessage_DataRef)

#define COMError_StartCOM_Mode()								(com_param1.StartCOM_Mode)

#define COMError_StopCOM_Mode()									(com_param1.StopCOM_Mode)

#define COMError_ReceiveMessage_Message()						(com_param1.ReceiveMessage_Message)
#define COMError_ReceiveMessage_DataRef()						(com_param2.ReceiveMessage_DataRef)

#define COMError_SendZeroMessage_Message()						(com_param1.SendZeroMessage_Message)

#define COMError_ReceiveStreamMessage_Message()					(com_param1.ReceiveStreamMessage_Message)
#define COMError_ReceiveStreamMessage_DataRef()					(com_param2.ReceiveStreamMessage_DataRef)
#define COMError_ReceiveStreamMessage_DataSize()				(com_param2.ReceiveStreamMessage_DataSize)

#define COMError_SendStreamMessage_Message()					(com_param1.SendReceiveMessage_Message)
#define COMError_SendStreamMessage_DataRef()					(com_param1.SendReceiveMessage_DataRef)
#define COMError_SendStreamMessage_DataSize()					(com_param1.SendReceiveMessage_DataSize)

#define COMError_GetMessageStatus_Message()						(com_param1.GetMessageStatus_Message)

#define COMError_InitMessage_Message()							(com_param1.InitMessage_Message)
#define COMError_InitMessage_DataRef()							(com_param2.InitMessage_DataRef)

/* Macros defined by API to access error values $Req: artf1269 $ */
/* Accessible from the COM error hook $Req: artf1268 $ */
#define COMErrorGetServiceId()									(com_serviceid)

/* API call prototypes */
StatusType StartCOM(COMApplicationModeType);
StatusType StopCOM(COMShutdownModeType);

/* Application modes in COM are just values in a global variable, set by StartCOM() */
extern COMApplicationModeType com_appmode;
#define GetCOMApplicationMode()									(com_appmode)	/* $Req: artf1276 $ */

/* Flag API not here: autogenerated by host tool */

#define COMCallback(name)										COMCallback_##name(void)		/* $Req: artf1260 $ */

StatusType SendMessage(MessageIdentifier, ApplicationDataRef);
StatusType ReceiveMessage(MessageIdentifier, ApplicationDataRef);
StatusType ReceiveStreamMessage(MessageIdentifier, ApplicationDataRef, LengthRef);
StatusType SendZeroMessage(MessageIdentifier);
StatusType SendStreamMessage(MessageIdentifier, ApplicationDataRef, LengthRef);
StatusType GetMessageStatus(MessageIdentifier);
StatusType StartCOMExtension(void); 							/* $Req: artf1301 $ */

/* COM error hook function $Req: artf1303 $ */
void  COMErrorHook (StatusType);

#endif /*COMLIB_H_*/
