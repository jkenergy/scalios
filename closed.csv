"Artifact ID","Title","Description","Submitted By","Submitted On","Last Modified","Closed","Group","Status","Category","Priority","Assigned To","In code","Item Link"
"artf1216","StartOS() shall return to caller on shut down","StartOS() shall return to the caller when the OS is shut down. This is an extension to OSEK defined behaviour and not contained in the OS spec. [OSEK133].","Ken Tindell","03/08/2007 1:14 PM","02/29/2008 6:01 PM","02/29/2008 6:01 PM","OSEK OS","Replaced","","4","None","Yes","http://10.211.55.3/sf/go/artf1216/"
"artf1182","E_OS_RESOURCE returned from WaitEvent()","WaitEvent() shall in extended status return E_OS_RESOURCE if the calling task occupies non-internal resources. See 13.5.3.4 p62 (doc1002). [OSEK099]","Ken Tindell","03/08/2007 12:42 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1182/"
"artf1113","Error hook is called if error in internal services","The error hook shall be called if an error is detected during task activation or event setting by internal services such as alarm expiry or message reception. See 11.2 p40 and 13.8.2.1 p68 (doc1002). [OSEK029]
","Ken Tindell","03/08/2007 11:33 AM","02/10/2008 10:37 PM","02/10/2008 10:37 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1113/"
"artf1185","GetAlarmBase() shall in standard status always return E_OK","GetAlarmBase() shall in standard status always return E_OK. See 13.6.3.1 p63 (doc1002). [OSEK102]","Ken Tindell","03/08/2007 12:44 PM","02/05/2008 2:08 PM","02/05/2008 2:08 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1185/"
"artf1159","E_OS_NOFUNC returned from ReleaseResource()","ReleaseResource() shall in extended status return E_OS_NOFUNC if the resource is not occupied or if a different resource should be released to conform to the stacking of resources as described in 8.2 (doc1002). See also 13.4.3.2 p59. [OSEK076]","Ken Tindell","03/08/2007 12:28 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1159/"
"artf1166","E_OS_STATE returned from SetEvent()","SetEvent() shall in extended status return E_OS_STATE if the specified task is in the SUSPENDED state. See 13.5.3.1 p60 (doc1002). [OSEK083]","Ken Tindell","03/08/2007 12:32 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1166/"
"artf1164","E_OK returned from SetEvent()","SetEvent() shall in standard status return E_OK. See 13.5.3.1 p60 (doc1002). [OSEK081]","Ken Tindell","03/08/2007 12:30 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1164/"
"artf1194","E_OS_ID returned from SetRelAlarm()","SetRelAlarm() shall in extended status return E_OS_ID if the alarm is invalid. [OSEK111].
","Ken Tindell","03/08/2007 12:56 PM","01/24/2008 5:50 PM","01/24/2008 5:50 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1194/"
"artf1189","E_OS_ID returned from GetAlarm()","GetAlarm() shall in extended status return E_OS_ID if the given alarm is invalid. See 13.6.3.2 p63 (doc1002). [OSEK106]
","Ken Tindell","03/08/2007 12:47 PM","01/24/2008 5:50 PM","01/24/2008 5:50 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1189/"
"artf1204","E_OS_ID returned from CancelAlarm()","CancelAlarm() shall in extended status return E_OS_ID if the alarm is invalid. [OSEK121]
","Ken Tindell","03/08/2007 1:01 PM","01/24/2008 5:54 PM","01/24/2008 5:54 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1204/"
"artf1186","E_OS_ID returned from GetAlarmBase()","GetAlarmBase() shall in extended status return E_OS_ID if the given alarm is invalid. See 13.6.3.1 p63 (doc1002). [OSEK103].","Ken Tindell","03/08/2007 12:45 PM","01/24/2008 5:54 PM","01/24/2008 5:54 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1186/"
"artf1327","E_OS_ID returned from SetAbsAlarm()","E_OS_ID returned from SetAbsAlarm() if the handle passed is invalid. See 13.6.3.4 doc1002.","Ken Tindell","03/15/2007 3:57 PM","01/24/2008 5:54 PM","01/24/2008 5:54 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1327/"
"artf1063","E_OS_ID returned from IncrementCounter()","If the input parameter <CounterID> is not valid OR the counter is a hardware counter, IncrementCounter() shall return E_OS_ID. [OS285]","Ken Tindell","03/05/2007 10:25 PM","01/24/2008 5:54 PM","01/24/2008 5:54 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1063/"
"artf1328","E_OS_ID returned from ExpireCounter()","E_OS_ID returned from ExpireCounter() if counter ID invalid. ExpireCounter() is an extension to AUTOSAR/OSEK.","Ken Tindell","03/15/2007 4:12 PM","01/24/2008 5:54 PM","01/24/2008 5:54 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1328/"
"artf1208","Alarm callback declarations","An alarm callback function shall be declared according to 13.6.5 p66 (doc1002). [OSEK125]

Replaced: Duplicate of artf1108.","Ken Tindell","03/08/2007 1:08 PM","03/15/2007 4:28 PM","03/15/2007 4:28 PM","OSEK OS","Replaced","","4","None","No","http://10.211.55.3/sf/go/artf1208/"
"artf1112","Error hook must not be called recursively","The error hook shall not be called recursively notwithstanding other requirements. See 11.2 p40 (doc1002). [OSEK028]
","Ken Tindell","03/08/2007 11:32 AM","01/09/2008 8:22 PM","01/09/2008 8:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1112/"
"artf1141","GetTaskState() behaviour","GetTaskState() shall indicate the state of the specified task with defined constants (RUNNING, READY, WAITING, SUSPENDED) and shall be callable from tasks, category 2 ISR, the error hook, and the pre/post task hooks. [OSEK057]","Ken Tindell","03/08/2007 11:51 AM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1141/"
"artf1064","IncrementCounter() processing","If its input parameter is valid, IncrementCounter() shall increment the counter <CounterID> by one (if any alarm connected to this counter expires, the given action, e.g. task activation, is done) and shall return E_OK. [OS286]
","Ken Tindell","03/05/2007 10:25 PM","01/24/2008 5:56 PM","01/24/2008 5:56 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1064/"
"artf1049","Interrupt enable on termination","If a task returns from the entry function without making a TerminateTask() or ChainTask() call and interrupts are still disabled, the Operating System shall enable them. [OS239]
","Ken Tindell","03/05/2007 10:08 PM","02/09/2008 6:16 PM","02/09/2008 6:16 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1049/"
"artf1245","Initial values set by StartCOM()","An initial value for a given unqueued message object shall be set by the StartCOM() call from values specified in the OIL file. See 2.2.5.2 p15 (doc1004). Duplicate of artf1261.","Ken Tindell","03/08/2007 6:45 PM","03/15/2007 1:15 AM","03/15/2007 1:15 AM","OSEK COM","Replaced","","4","None","No","http://10.211.55.3/sf/go/artf1245/"
"artf1120","No pre/post hook calls if ShutdownOS() called","The RTOS shall not call PostTaskHook if ShutdownOS() is called while a task is running. See 11.5 p43 (doc1002). [OSEK036]

Replaced by artf1043.","Ken Tindell","03/08/2007 11:39 AM","03/14/2007 4:30 PM","03/14/2007 4:30 PM","OSEK OS","Replaced","","4","None","Yes","http://10.211.55.3/sf/go/artf1120/"
"artf1084","GetScheduleTableStatus() processing","If the schedule table <ScheduleID>  is configured with hard syncronization strategy and no global time was provided to the Operating System, GetScheduleTableStatus() shall return SCHEDULETABLE_WAITING via the reference parameter <ScheduleStatus> and shall return E_OK. [OS354]","Ken Tindell","03/08/2007 10:56 AM","03/15/2007 12:45 AM","03/15/2007 12:45 AM","AUTOSAR OS 2.0","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1084/"
"artf1066","GetScheduleTableStatus() processing","If the schedule table <ScheduleID> is started AND synchronous, GetScheduleTableStatus() shall pass back SCHEDULETABLE_RUNNING_AND_SYNCH via the reference parameter <ScheduleStatus> and shall return E_OK. [OS290]
","Ken Tindell","03/05/2007 10:27 PM","03/15/2007 12:45 AM","03/15/2007 12:45 AM","AUTOSAR OS 2.0","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1066/"
"artf1374","OS415","OS415: An expiry point shall permit the configuration of a OsScheduleTableMaxRetard  that defines the maximum number of ticks that can be subtracted from expiry point offset. ","Ken Tindell","02/07/2008 9:55 PM","02/27/2008 12:40 PM","02/27/2008 12:40 PM","AUTOSAR OS 3.0","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1374/"
"artf1377","OS428","OS428: If schedule table processing has been cancelled before reaching the Final Expiry Point and is subsequently restarted then OS358/OS347 means that the re-start occurs from the start of the schedule table. ","Ken Tindell","02/07/2008 9:57 PM","02/27/2008 12:45 PM","02/26/2008 2:07 PM","AUTOSAR OS 3.0","Deleted","","4","None","Yes","http://10.211.55.3/sf/go/artf1377/"
"artf1378","OS439","OS439: The Operating System shall offer the OSEK error macros (OSError…()) to all configured error hooks AND there shall be two (like in OIL) global configuration parameter to switch these macros on or off. 

","Ken Tindell","02/07/2008 9:58 PM","02/27/2008 12:47 PM","02/27/2008 12:47 PM","AUTOSAR OS 3.0","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1378/"
"artf1118","PostTaskHook called every time task switched away from","PostTaskHook shall be called every time the scheduler switches away from a task. The hook shall be called prior to the state of the task changing from RUNNING. See 11.5 p43. [OSEK034].","Ken Tindell","03/08/2007 11:37 AM","01/09/2008 8:22 PM","01/09/2008 8:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1118/"
"artf1073","Alarm action error handling","If an error happens during the execution of an alarm action, e.g. E_OS_LIMIT caused by a task activation, the error hook(s) are called, but the IncrementCounter() service itself will return E_OK. [OS321]","Ken Tindell","03/05/2007 10:31 PM","01/24/2008 6:15 PM","01/24/2008 6:15 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1073/"
"artf1190","SetRelAlarm() behaviour","SetRelAlarm() shall set the given alarm running such that after the specified number of ticks have elapsed (relative to the time the call is made) the defined action associate with the alarm shall occur. See 13.6.3.3 p64 (doc1002). [OSEK107].
","Ken Tindell","03/08/2007 12:47 PM","01/24/2008 6:18 PM","01/24/2008 6:18 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1190/"
"artf1191","SetRelAlarm() alarm cycle time","SetRelAlarm() shall set the alarm to re-occur periodically with a given cycle time if the cycle parameter is non-zero. See 13.6.3.3 p64 (doc1002). [OSEK108]","Ken Tindell","03/08/2007 12:48 PM","01/24/2008 6:18 PM","01/24/2008 6:18 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1191/"
"artf1170","E_OS_CALLEVEL returned from ClearEvent()","ClearEvent() shall in extended status return E_OS_CALLEVEL if the caller is an interrupt service routine. See 13.5.3.2 p61 (doc1002). [OSEK087]","Ken Tindell","03/08/2007 12:35 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1170/"
"artf1196","SetAbsAlarm() behaviour","SetAbsAlarm() shall set the given alarm running so that it expires when the specified number of ticks equals the tick value of the counter statically associated with the alarm. [OSEK113].","Ken Tindell","03/08/2007 12:58 PM","01/24/2008 6:19 PM","01/24/2008 6:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1196/"
"artf1077","E_OS_VALUE returned from StartScheduleTableRel()","If <Offset> is zero StartScheduleTable() shall return E_OS_VALUE. [OS332]
","Ken Tindell","03/05/2007 10:38 PM","03/14/2007 3:38 PM","03/14/2007 3:38 PM","AUTOSAR OS 2.0","Replaced","","4","None","No","http://10.211.55.3/sf/go/artf1077/"
"artf1119","PreTaskHook called every time task switched to","PreTaskHook shall be called every time the scheduler switches to a task. The hook shall be called after the state of the task changing to RUNNING. See 11.5 p43 (doc1002). [OSEK035]","Ken Tindell","03/08/2007 11:38 AM","01/09/2008 8:22 PM","01/09/2008 8:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1119/"
"artf1041","E_OS_MISSINGEND on autoterminate","If a task returns from its entry function without making a TerminateTask() or ChainTask() call AND the ErrorHook is configured, the Operating System shall call the ErrorHook (this is done regardless of whether the task causes other errors, e.g. E_OS_RESOURCE) with status E_OS_MISSINGEND before the task leaves the RUNNING state. [OS069]

Note that the AUTOSAR spec (doc1001) does not discuss what code will be reported by OSErrorGetServiceId(). Since there is no API call active a new service ID is invented called OSServiceId_NoServiceId, and this is what is used.
","Ken Tindell","03/05/2007 10:02 PM","02/29/2008 5:10 PM","01/09/2008 8:25 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1041/"
"artf1139","GetTaskID() indicates currently running task","GetTaskID() shall indicate the currently running task or indicate INVALID_TASK if no task is running. It is callable from error hook, pre/post task hooks, tasks and category 2 ISRs [OSEK055]","Ken Tindell","03/08/2007 11:50 AM","01/09/2008 8:22 PM","01/09/2008 8:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1139/"
"artf1223","Error hook not called if disabled","The error hook shall not be called if the hook is statically disabled. [OSEK140]
","Ken Tindell","03/08/2007 1:19 PM","02/11/2008 12:07 AM","02/11/2008 12:07 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1223/"
"artf1128","E_OS_ID returned from ActivateTask()","ActivateTask() shall return E_OS_ID in extended status if the task reference does not point to a valid task. [OSEK044]","Ken Tindell","03/08/2007 11:44 AM","01/09/2008 8:25 PM","01/09/2008 8:25 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1128/"
"artf1129","ActivateTask() and task switch to higher priority task","ActivateTask() shall cause a reschedule if the activated task has a higher priority than the current priority of the current task and no category 2 ISR is executing. [OSEK045]","Ken Tindell","03/08/2007 11:44 AM","01/09/2008 8:27 PM","01/09/2008 8:27 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1129/"
"artf1102","Internal resource protocol","The RTOS shall implement internal resources according to the protocol defined in 8.7 p34 (doc1002). [OSEK018]","Ken Tindell","03/08/2007 11:24 AM","02/09/2008 6:27 PM","02/09/2008 6:27 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1102/"
"artf1114","OSErrorGetServiceId() must be defined","The RTOS shall define a macro OSErrorGetServiceId() that shall indicate the service identifier leading to the error. The service identifier shall be named as described in 11.2 p40 (doc1002). [OSEK030].
","Ken Tindell","03/08/2007 11:34 AM","02/10/2008 10:41 PM","02/10/2008 10:41 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1114/"
"artf1143","Task declaration","Tasks shall be named according to the prototype described in 13.2.5 p54 (doc1002). [OSEK059]
","Ken Tindell","03/08/2007 11:53 AM","02/10/2008 10:42 PM","02/10/2008 10:42 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1143/"
"artf1116","Tasks shall start with interrupts enabled","The RTOS shall enable interrupts prior to beginning scheduling. See 11.3 p42 (doc1002). [OSEK032].","Ken Tindell","03/08/2007 11:35 AM","02/10/2008 10:45 PM","02/10/2008 10:45 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1116/"
"artf1197","SetAbsAlarm() behaviour","SetAbsAlarm() shall ensure the alarm repeats periodically on expiry with a given cycle time if the cycle value passed to the call is non-zero. [OSEK114]","Ken Tindell","03/08/2007 12:58 PM","01/24/2008 6:33 PM","01/24/2008 6:33 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1197/"
"artf1115","Service identifier corresponds to most recent API call","The service identifier for internal services (such as alarm expiry or message reception) shall be the most recent API service call that lead to the error. [OSEK031]
","Ken Tindell","03/08/2007 11:34 AM","02/10/2008 10:49 PM","02/10/2008 10:49 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1115/"
"artf1105","Alarm callback processor level","Alarm callback routines shall run at a processor level where category 2 ISRs are disabled. [OSEK021]. Replaced by artf1211.","Ken Tindell","03/08/2007 11:26 AM","03/14/2007 1:09 PM","03/14/2007 1:09 PM","OSEK OS","Replaced","","4","None","No","http://10.211.55.3/sf/go/artf1105/"
"artf1228","OSErrorGetServiceId() is callable from the error hook","OSErrorGetServiceId() shall be callable from the error hook. See 13.8.4 p69 and 11.1 p41 (doc1002). [OSEK145]","Ken Tindell","03/08/2007 1:24 PM","02/11/2008 12:09 AM","02/11/2008 12:09 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1228/"
"artf1149","ResumeOSInterrupts() behaviour","ResumeOSInterrupts() shall permit nested Suspend/Resume calls and shall restore the processor level to the level at which the outermost SuspendOSInterrupts() call was made. See 13.3.2.5 p56 (doc1002). [OSEK065]","Ken Tindell","03/08/2007 12:21 PM","02/11/2008 3:03 PM","02/11/2008 3:03 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1149/"
"artf1117","Startup hook called before tasks and alarms started","The RTOS shall call the startup hook before autostarted tasks and alarms are activated for the given application mode. See 11.3 p42 (doc1002). [OSEK033].","Ken Tindell","03/08/2007 11:36 AM","02/11/2008 3:08 PM","02/11/2008 3:08 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1117/"
"artf1145","DisasbleAllInterrupts() behaviour","DisableAllInterrupts() shall raise the processor level to a point where all interrupts are prevented from being handled. See 13.3.2.2 p55 (doc1002). [OSEK061]","Ken Tindell","03/08/2007 11:54 AM","02/11/2008 3:00 PM","02/11/2008 3:00 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1145/"
"artf1158","E_OK returned from ReleaseResource()","ReleaseResource() shall in standard status return only E_OK. [OSEK075]","Ken Tindell","03/08/2007 12:27 PM","01/09/2008 8:32 PM","01/09/2008 8:32 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1158/"
"artf1181","E_OS_CALLEVEL returned from WaitEvent()","WaitEvent() shall in extended status return E_OS_CALLEVEL if the caller is running at interrupt level. See 13.5.3.4 p62 (doc1002). [OSEK098]","Ken Tindell","03/08/2007 12:42 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1181/"
"artf1173","GetEvent() shall in standard status return E_OK","GetEvent() shall in standard status return E_OK. See 13.5.3.3 p61 (doc1002). [OSEK090].
","Ken Tindell","03/08/2007 12:37 PM","02/11/2008 3:19 PM","02/11/2008 3:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1173/"
"artf1052","GetISRID()","If called from interrupt level, GetISRID() shall return the identifier of the currently executed ISR. [OS263]","Ken Tindell","03/05/2007 10:10 PM","01/09/2008 8:36 PM","01/09/2008 8:36 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1052/"
"artf1169","E_OS_ACCESS returned from ClearEvent()","ClearEvent() shall in extended status return E_OS_ACCESS if the calling task is not an extended task. See 13.5.3.2 p61 (doc1002). [OSEK086]
","Ken Tindell","03/08/2007 12:34 PM","01/09/2008 8:42 PM","01/09/2008 8:42 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1169/"
"artf1175","E_OS_ACCESS returned from GetEvent()","GetEvent() shall in extended status return E_OS_ACCESS if the specified task is not an extended task. See 13.5.3.3 p61 (doc1002). [OSEK092].
","Ken Tindell","03/08/2007 12:38 PM","02/11/2008 3:21 PM","02/11/2008 3:21 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1175/"
"artf1171","GetEvent() behaviour","GetEvent() shall return the status of the events for the specified task. See 13.5.3.3 p61 (doc1002). [OSEK088].","Ken Tindell","03/08/2007 12:36 PM","02/11/2008 3:23 PM","02/11/2008 3:23 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1171/"
"artf1138","E_OS_RESOURCE returned from Schedule()","Schedule() shall in extended status return E_OS_RESOURCE if the calling task has non-internal resources occupied. [OSEK054]","Ken Tindell","03/08/2007 11:49 AM","01/09/2008 8:54 PM","01/09/2008 8:54 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1138/"
"artf1156","ReleaseResource() behaviour","ReleaseResource() shall perform the counterpart to GetResource(). See 8.5, 13.4.3.1 p58 and 13.4.3.2 p59 (doc1002). [OSEK073]
","Ken Tindell","03/08/2007 12:25 PM","02/11/2008 3:35 PM","02/11/2008 3:35 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1156/"
"artf1177","WaitEvent() behaviour","WaitEvent() shall set the set of events for which the calling task is waiting to the given event mask. If none of the events has already occurred the task shall be set into the WAITING state. See 13.5.3.4 p61 (doc1002). [OSEK094]","Ken Tindell","03/08/2007 12:39 PM","02/11/2008 3:47 PM","02/11/2008 3:47 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1177/"
"artf1160","E_OS_ACCESS returned from ReleaseResource()","ReleaseResource() shall in extended status return E_OS_ACCESS if the resource has a lower ceiling priority than the statically assigned priority of the calling task or ISR. See 13.4.3.2 p59 (doc1002). [OSEK077].","Ken Tindell","03/08/2007 12:28 PM","01/09/2008 10:46 PM","01/09/2008 10:46 PM","OSEK OS","Deleted","","4","None","Yes","http://10.211.55.3/sf/go/artf1160/"
"artf1163","SetEvent() behaviour","SetEvent() shall set the events associated with a task according to the specific event mask. If the task is in the WAITING state and waiting for any of the events within the mask then the task shall be placed in the READY state and added to the back of the FIFO queue associated with the statically assigned priority of the task. See 13.5.3.1 p60 (doc1002). [OSEK080]","Ken Tindell","03/08/2007 12:30 PM","02/11/2008 4:22 PM","02/11/2008 4:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1163/"
"artf1225","PostTaskHook declaration","The post-task hook shall be declared as specified in 13.8.2.3 p68 (doc1002). [OSEK142]","Ken Tindell","03/08/2007 1:20 PM","02/11/2008 4:24 PM","02/11/2008 4:24 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1225/"
"artf1157","Stacking of resource locks","GetResource() and ReleaseResource() calls shall be implemented to permit the stacking of resource occupying as described in 8.2 (doc1002). See also 13.4.3.2 p59. [OSEK074]
","Ken Tindell","03/08/2007 12:26 PM","02/11/2008 4:44 PM","02/11/2008 4:44 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1157/"
"artf1218","Shutdown hook and ShutdownOS()","ShutdownOS() shall call the shutdown hook and pass through the status code passed to ShutdownOS(). [OSEK135]
","Ken Tindell","03/08/2007 1:15 PM","02/11/2008 4:50 PM","02/11/2008 4:50 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1218/"
"artf1212","Alarm callback permitted API calls","The system shall ensure that alarm callback functions may call the API calls listed in Figure 12-1 (doc1002). [OSEK129]

(Figure 12-1 lists only SuspendAllInterrupts and ResumeAllInterrupts).","Ken Tindell","03/08/2007 1:11 PM","02/11/2008 4:54 PM","02/11/2008 4:54 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1212/"
"artf1217","ShutdownOS() behaviour","ShutdownOS() shall shut down the OS. See 13.7.2.3 p67. [OSEK134].","Ken Tindell","03/08/2007 1:15 PM","02/11/2008 4:58 PM","02/11/2008 4:58 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1217/"
"artf1151","Priority ceiling protocol behaviour","GetResource() shall implement the priority ceiling protocol as described in 8.5 (doc1002). See also 13.4.3.1 p58. [OSEK068].","Ken Tindell","03/08/2007 12:22 PM","02/11/2008 5:02 PM","02/11/2008 5:02 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1151/"
"artf1097","Rescheduling cases","Rescheduling for fully preemptive tasks shall be applied only in the 7 cases listed in 4.6.1 p21 (doc1002). [OSEK013]
","Ken Tindell","03/08/2007 11:20 AM","02/11/2008 5:17 PM","02/11/2008 5:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1097/"
"artf1153","GetResource() shall in standard status only return E_OK","GetResource() shall in standard status only return E_OK. [OSEK070]","Ken Tindell","03/08/2007 12:24 PM","01/09/2008 8:31 PM","01/09/2008 8:31 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1153/"
"artf1180","E_OS_ACCESS returned from WaitEvent()","WaitEvent() shall in extended status return E_OS_ACCESS if the calling task is not an extended task. See 13.5.3.4 p62 (doc1002). [OSEK097]
","Ken Tindell","03/08/2007 12:41 PM","01/09/2008 9:01 PM","01/09/2008 9:01 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1180/"
"artf1161","ReleaseResource() callable from ISR level","ReleaseResource() shall be callable from a task or an ISR. See 13.4.3.2 p59 (doc1002). [OSEK078]","Ken Tindell","03/08/2007 12:29 PM","02/11/2008 5:19 PM","02/11/2008 5:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1161/"
"artf1168","ClearEvent() shall in standard status return E_OK","ClearEvent() shall in standard status return E_OK. See 13.5.3.2 p61 (doc1002). [OSEK085]
","Ken Tindell","03/08/2007 12:34 PM","01/09/2008 9:06 PM","01/09/2008 9:06 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1168/"
"artf1322","INVALID_ISR returned from GetISRID()","If the caller is not an ISR then INVALID_TASK is returned. [OS264]","Ken Tindell","03/14/2007 2:40 PM","01/09/2008 9:08 PM","01/09/2008 9:08 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1322/"
"artf1230","OSError_x_y()","OSError_x_y() shall return the value of the parameter named  ‘y’ of the most recent API call named ‘x’. See 13.8.4 p69 and 11.1 p41 (doc1002). [OSEK147]","Ken Tindell","03/08/2007 1:25 PM","02/11/2008 5:38 PM","02/11/2008 5:38 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1230/"
"artf1155","E_OS_ID returned from GetResource()","GetResource() shall in extended status return E_OS_ID if the specified resource is invalid. [OSEK072]
","Ken Tindell","03/08/2007 12:25 PM","01/09/2008 5:14 PM","01/09/2008 5:14 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1155/"
"artf1044","Interrupt enable/disable","If EnableAllInterrupts() / ResumeAllInterrupts() / ResumeOSInterrupts() are called and no corresponding DisableAllInterupts() / SuspendAllInterrupts() / SuspendOSInterrupts() was done before, the Operating System shall not perform this OS service. [OS092]
","Ken Tindell","03/05/2007 10:04 PM","02/11/2008 5:46 PM","02/11/2008 5:46 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1044/"
"artf1150","Category 2 ISR declarations","Category 2 ISRs shall be declared according to the syntax specified in 13.3.3 p57 (doc1002). [OSEK067]
","Ken Tindell","03/08/2007 12:22 PM","02/08/2008 2:27 PM","02/08/2008 2:27 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1150/"
"artf1167","ClearEvent() behaviour","ClearEvent() shall clear the events of the calling task that are specified by the event mask. See 13.5.3.2 p61 (doc1002). [OSEK084]","Ken Tindell","03/08/2007 12:33 PM","02/08/2008 2:38 PM","02/08/2008 2:38 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1167/"
"artf1234","DeclareAlarm()","The DeclareAlarm() constructional element shall be provided. [OSEK151]","Ken Tindell","03/08/2007 1:27 PM","02/08/2008 2:43 PM","02/08/2008 2:43 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1234/"
"artf1232","DeclareResource()","The DeclareResource() constructional element shall be provided.  [OSEK149]","Ken Tindell","03/08/2007 1:26 PM","02/08/2008 2:43 PM","02/08/2008 2:43 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1232/"
"artf1154","E_OS_ACCESS returned from GetResource()","GetResource() shall return in extended status E_OS_ACCESS if the specified resource is already occupied or if the statically assigned priority of the calling task or ISR is higher than the ceiling of the resource. [OSEK071]","Ken Tindell","03/08/2007 12:24 PM","01/09/2008 5:17 PM","01/09/2008 5:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1154/"
"artf1136","Schedule() behaviour","Schedule() shall release all internal resources, perform a switch to a higher priority ready task (if any), then when the task resumes executing the internal resources shall be reacquired. [OSEK052]","Ken Tindell","03/08/2007 11:48 AM","02/11/2008 2:53 PM","02/11/2008 2:53 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1136/"
"artf1099","Rescheduling of non preemptive tasks","Rescheduling for non preemptive tasks shall be applied only in the 4 cases listed in 4.6.2 p22 (doc1002). [OSEK015]
","Ken Tindell","03/08/2007 11:22 AM","02/11/2008 2:55 PM","02/11/2008 2:55 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1099/"
"artf1070","Increment software counter on alarm expiry","The Operating System shall provide the ability to increment a software counter as an alternative action on alarm expiry. [OS301]","Ken Tindell","03/05/2007 10:29 PM","02/05/2008 2:13 PM","02/05/2008 2:13 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1070/"
"artf1148","SuspendOSInterrupts() behaviour","SuspendOSInterrupts() shall raise (but not lower) the processor level to a point where all category 2 interrupts are prevented from being handled. See 13.3.2.6 p57 (doc1002). [OSEK064]

Can be called from a task, a category 2 ISR, a category 1 ISR.","Ken Tindell","03/08/2007 12:20 PM","02/11/2008 2:58 PM","02/11/2008 2:58 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1148/"
"artf1179","WaitEvent() shall in standard status return E_OK","WaitEvent() shall in standard status return E_OK. See 13.5.3.4 p62 (doc1002). [OSEK096]
","Ken Tindell","03/08/2007 12:40 PM","02/11/2008 4:28 PM","02/11/2008 4:28 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1179/"
"artf1221","OSDEFAULTAPPMODE","The symbol OSDEFAULTAPPMODE shall be defined as a default application mode. See 13.7.3 p67 (doc1002). [OSEK138]
","Ken Tindell","03/08/2007 1:18 PM","02/11/2008 4:33 PM","02/11/2008 4:33 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1221/"
"artf1214","StartOS() behaviour","StartOS() shall start the OS with the given application mode.
[OSEK131]","Ken Tindell","03/08/2007 1:12 PM","02/11/2008 4:41 PM","02/11/2008 4:41 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1214/"
"artf1219","Shutdown hook returns to ShutdownOS() which returns from StartOS()","When the shutdown hook returns the ShutdownOS() call shall cause the original call to StartOS() to return to the caller. This is an extension to the OSEK spec. [OSEK136]","Ken Tindell","03/08/2007 1:16 PM","02/11/2008 4:57 PM","02/11/2008 4:57 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1219/"
"artf1152","GetResource() shall be callable from a task or an ISR","GetResource() shall be callable from a task or an ISR. [OSEK069].","Ken Tindell","03/08/2007 12:24 PM","02/11/2008 5:19 PM","02/11/2008 5:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1152/"
"artf1039","Stack overflow detection","If a task/Category 2 ISR exceeds its specified stack usage, the Operating System shall be capable of detecting it. [OS067]
","Ken Tindell","03/05/2007 10:00 PM","02/20/2008 11:09 AM","02/20/2008 11:09 AM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1039/"
"artf1088","The RTOS shall support more than one task at a priority.","The RTOS shall support more than one task at a priority. [OSEK004]","Ken Tindell","03/08/2007 11:14 AM","02/12/2008 11:51 AM","02/12/2008 11:51 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1088/"
"artf1043","No calling PostTaskHook on ShutdownOS()","If the PostTaskHook is configured, the Operating System shall not call the hook if ShutdownOS() is called. [OS071]
","Ken Tindell","03/05/2007 10:03 PM","01/09/2008 8:12 PM","01/09/2008 8:12 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1043/"
"artf1086","The RTOS shall support multiple requesting of basic tasks","The RTOS shall support multiple requesting of basic tasks. [OSEK002]","Ken Tindell","03/08/2007 11:13 AM","02/12/2008 11:52 AM","02/12/2008 11:52 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1086/"
"artf1093","The RTOS shall support at least 1 alarm.","The RTOS shall support at least 1 alarm. [OSEK009]

","Ken Tindell","03/08/2007 11:16 AM","02/12/2008 11:53 AM","02/12/2008 11:53 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1093/"
"artf1087","The RTOS shall support at least 16 tasks.","The RTOS shall support at least 16 tasks. [OSEK003]","Ken Tindell","03/08/2007 11:14 AM","02/12/2008 5:40 PM","02/12/2008 5:40 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1087/"
"artf1090","The RTOS shall support at least 16 priority levels.","The RTOS shall support at least 16 priority levels. [OSEK006]","Ken Tindell","03/08/2007 11:15 AM","02/12/2008 5:41 PM","02/12/2008 5:41 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1090/"
"artf1125","ActivateTask() and READY","ActivateTask() shall transfer the specified task into the READY state. [OSEK041]
","Ken Tindell","03/08/2007 11:42 AM","01/09/2008 8:13 PM","01/09/2008 8:13 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1125/"
"artf1089","The RTOS shall support at least 8 events per task.","The RTOS shall support at least 8 events per task. [OSEK005]","Ken Tindell","03/08/2007 11:14 AM","02/12/2008 5:43 PM","02/12/2008 5:43 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1089/"
"artf1235","Provide an API for saving and restoring a DSP context.","Provide an API for saving and restoring a DSP context. The model is the setjmp/longjmp API in the standard C library, but instead saving the DSP registers (that otherwise are not included in the standard task context). See wiki1026.","Ken Tindell","03/08/2007 3:59 PM","04/12/2007 10:55 AM","04/12/2007 10:55 AM","OSEK OS","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1235/"
"artf1257","The RTOS shall implement dynamic length internal messages.","The RTOS shall implement dynamic length internal messages. An extension to the OSEK COM spec.

Replaced by artf1332.","Ken Tindell","03/08/2007 6:59 PM","03/19/2007 3:50 PM","03/19/2007 3:50 PM","OSEK COM","Replaced","","4","None","No","http://10.211.55.3/sf/go/artf1257/"
"artf1091","The RTOS shall support at least 8 resources.","The RTOS shall support at least 8 resources. [OSEK007]","Ken Tindell","03/08/2007 11:15 AM","02/12/2008 5:44 PM","02/12/2008 5:44 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1091/"
"artf1094","The RTOS shall support at least 1 application mode.","The RTOS shall support at least 1 application mode. [OSEK010]
","Ken Tindell","03/08/2007 11:16 AM","02/12/2008 5:45 PM","02/12/2008 5:45 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1094/"
"artf1092","The RTOS shall support at least 2 internal resources.","The RTOS shall support at least 2 internal resources. [OSEK008]","Ken Tindell","03/08/2007 11:15 AM","02/12/2008 5:46 PM","02/12/2008 5:46 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1092/"
"artf1210","Alarm bound to one task or callback","An alarm shall be statically bound to one callback function or one task. See 9.2 p36 (doc1002). [OSEK127]

Modified by AUTOSAR requirements for allowing also a counter increment as an alternative expiry action.","Ken Tindell","03/08/2007 1:09 PM","02/12/2008 5:49 PM","02/12/2008 5:49 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1210/"
"artf1277","InitMessage() and dynamic non-queued messages","InitMessage() shall initialize a dynamic received non-queued message object to zero values for the maximum size of the message. See 2.9.2.2.4 p47 (doc1004).

InitMessage() is required in CCCA upwards. See p59 doc1004.","Ken Tindell","03/08/2007 7:12 PM","03/20/2007 3:39 PM","03/19/2007 2:52 PM","OSEK COM","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1277/"
"artf1209","An alarm shall be statically bound to one counter","An alarm shall be statically bound to one counter. See 9.2 p36 (doc1002). [OSEK126]","Ken Tindell","03/08/2007 1:08 PM","02/12/2008 5:50 PM","02/12/2008 5:50 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1209/"
"artf1134","ChainTask() behaviour","ChainTask() shall behave as an call to ActivateTask() immediately (and atomically) followed by the function of TerminateTask(), returning E_OS_ID, E_OS_RESOURCE, E_OS_CALLEVEL and E_OS_LIMIT where appropriate. See 13.2.3.3 p51 (doc1002). [OSEK050]","Ken Tindell","03/08/2007 11:48 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1134/"
"artf1131","TerminateTask() shall release internal resources","TerminateTask() shall release any internal resources assigned to the task. [OSEK047]","Ken Tindell","03/08/2007 11:46 AM","02/12/2008 6:01 PM","02/12/2008 6:01 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1131/"
"artf1040","Stack fault processing","If a stack fault is detected by stack monitoring, the Operating System shall call the ShutdownOS() service with the status E_OS_STACKFAULT. [OS068]
","Ken Tindell","03/05/2007 10:01 PM","02/20/2008 11:09 AM","02/20/2008 11:09 AM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1040/"
"artf1146","ResumeAllInterrupts() behaviour","ResumeAllInterrupts() shall permit nested Suspend/Resume calls and shall restore the processor level to the level at which the outermost SuspendAllInterrupts() call was made. See 13.3.2.5 p56 (doc1002). [OSEK062]","Ken Tindell","03/08/2007 11:55 AM","02/20/2008 11:57 AM","02/11/2008 3:01 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1146/"
"artf1122","E_OK is zero","The value of E_OK shall be 0. See 13.1 p49 (doc1002). [OSEK038].","Ken Tindell","03/08/2007 11:40 AM","01/09/2008 8:38 PM","01/09/2008 8:38 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1122/"
"artf1107","Alarm expiry behaves as if via an API call","The RTOS shall execute a task activation or an event setting associated with an alarm expiry with the same behavior as a normal task activation or event setting. See 9.2 p36 (doc1002). [OSEK023]

Also AUTOSAR requires that this is extended to include IncrementCounter() as a possible expiry action.","Ken Tindell","03/08/2007 11:27 AM","02/08/2008 2:25 PM","02/08/2008 2:25 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1107/"
"artf1140","GetTaskID() call context","GetTaskID() shall be callable from tasks, category 2 ISRs and hook functions. [OSEK056]","Ken Tindell","03/08/2007 11:51 AM","02/10/2008 11:57 PM","02/10/2008 11:57 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1140/"
"artf1135","Self-chain behaviour","A self-chain operation (i.e. the calling task and the chained task are the same) shall not result in an increased activation count and no return of E_OS_LIMIT shall occur. See 13.2.3.3 p51 (doc1002). [OSEK051]
","Ken Tindell","03/08/2007 11:48 AM","02/11/2008 2:47 PM","02/11/2008 2:47 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1135/"
"artf1253","The RTOS shall implement notification class 1.","The RTOS shall implement notification class 1. Derived from artf1251. See 2.6.1 p31 (doc1004). Replaced by artf1247, artf1248, artf1249 and artf1250.","Ken Tindell","03/08/2007 6:55 PM","03/14/2007 11:31 AM","03/08/2007 7:00 PM","OSEK COM","Replaced","","4","None","","http://10.211.55.3/sf/go/artf1253/"
"artf1251","The RTOS shall implement CCCB conformance class.","The RTOS shall implement CCCB conformance class. See Table 4-1 p60 (doc1004). Replaced by artf1252, artf1253, artf1254 and artf1255.","Ken Tindell","03/08/2007 6:54 PM","03/14/2007 11:31 AM","03/08/2007 7:01 PM","OSEK COM","Replaced","","4","None","","http://10.211.55.3/sf/go/artf1251/"
"artf1098","Resource locking","Resources shall be locked according to the ceiling protocol defined in 8.5 p31 (doc1002). [OSEK014]","Ken Tindell","03/08/2007 11:21 AM","03/14/2007 11:31 AM","03/08/2007 1:52 PM","OSEK OS","Replaced","","4","None","","http://10.211.55.3/sf/go/artf1098/"
"artf1302","Callouts","Callouts shall be defined according to the specification in 2.9.3.2 doc1004.","Ken Tindell","03/08/2007 7:26 PM","03/19/2007 2:14 PM","03/19/2007 2:14 PM","OSEK COM","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1302/"
"artf1292","SendDynamicMessage()","SendDynamicMessage() shall behave as SendMessage() except that a dynamically sized amount of data shall be sent. See 2.9.2.4.2 p51 doc1004. This is an extension to the OSEK COM spec.","Ken Tindell","03/08/2007 7:20 PM","03/19/2007 3:42 PM","03/19/2007 3:42 PM","OSEK COM","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1292/"
"artf1293","SendDynamicMessage()","SendDynamicMessage() shall in extended status return E_COM_LENGTH if the length parameter is outside the range 0 ..  predefined maximum message length. See 2.9.2.4.3 p52 doc1004. This is an extension to the OSEK COM spec.
","Ken Tindell","03/08/2007 7:21 PM","03/19/2007 3:43 PM","03/19/2007 3:43 PM","OSEK COM","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1293/"
"artf1294","ReceiveDynamicMessage()","ReceiveDynamicMessage() shall behave as ReceiveMessage() except that a dynamically sized amount of data shall be received. See 2.9.2.4.4 p53 doc1004. This is an extension to the OSEK COM spec.","Ken Tindell","03/08/2007 7:23 PM","03/19/2007 3:43 PM","03/19/2007 3:43 PM","OSEK COM","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1294/"
"artf1215","StartOS() and startup hook call","StartOS() shall call the startup hook (if configured) before starting the scheduler. See Figure 11-2 p42 (doc1002). [OSEK132]","Ken Tindell","03/08/2007 1:13 PM","02/11/2008 2:51 PM","02/11/2008 2:51 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1215/"
"artf1144","SuspendAllInterrupts() behaviour","SuspendAllInterrupts() shall raise the processor level to a point where all interrupts are prevented from being handled. See 13.3.2.4 p56 (doc1002). [OSEK060]","Ken Tindell","03/08/2007 11:53 AM","02/11/2008 2:58 PM","02/11/2008 2:58 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1144/"
"artf1147","EnableAllInterrupts behaviour","EnableAllInterrupts() shall restore the processor to the level prior to the corresponding disable call. See 13.3.2.1 p54 (doc1002). [OSEK063]
","Ken Tindell","03/08/2007 11:56 AM","02/11/2008 3:02 PM","02/11/2008 3:02 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1147/"
"artf1176","E_OS_STATE returned from GetEvent()","GetEvent() shall in extended status return E_OS_STATE if the task is in the SUSPENDED state. See 13.5.3.3 p61 (doc1002). [OSEK093]
","Ken Tindell","03/08/2007 12:39 PM","02/11/2008 3:20 PM","02/11/2008 3:20 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1176/"
"artf1174","E_OS_ID returned from GetEvent()","GetEvent() shall in extended status return E_OS_ID if the specified task is invalid. See 13.5.3.3 p61 (doc1002). [OSEK091]
","Ken Tindell","03/08/2007 12:37 PM","02/11/2008 3:21 PM","02/11/2008 3:21 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1174/"
"artf1188","Standard status returns from GetAlarm()","GetAlarm() shall in standard status return E_OK or E_OS_NOFUNC (indicating the alarm is not in use). See 13.6.3.2 p63 (doc1002). [OSEK105]","Ken Tindell","03/08/2007 12:46 PM","02/05/2008 12:32 PM","02/05/2008 12:32 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1188/"
"artf1071","E_OS_VALUE returned from SetRelAlarm()","If in a call to SetRelAlarm() the parameter “increment” is set to zero, the service shall return E_OS_VALUE in standard and extended status. [OS304]","Ken Tindell","03/05/2007 10:30 PM","02/05/2008 12:34 PM","02/05/2008 12:34 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1071/"
"artf1193","E_OS_STATE returned from SetRelAlarm()","SetRelAlarm() shall in standard status return E_OS_STATE if the alarm is already running or E_OK if no other errors. [OSEK110]","Ken Tindell","03/08/2007 12:55 PM","02/05/2008 12:39 PM","02/05/2008 12:39 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1193/"
"artf1195","E_OS_VALUE returned from SetRelAlarm()","SetRelAlarm() shall in extended status return E_OS_VALUE if the values of the increment or cycle parameters are out of range. [OSEK112].","Ken Tindell","03/08/2007 12:56 PM","02/05/2008 12:53 PM","02/05/2008 12:53 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1195/"
"artf1192","SetRelAlarm() shall be callable from tasks and ISRs","SetRelAlarm() shall be callable from tasks and ISRs. 13.6.3.3 p64 (doc1002). [OSEK109]
","Ken Tindell","03/08/2007 12:54 PM","02/05/2008 12:57 PM","02/05/2008 12:57 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1192/"
"artf1198","SetAbsAlarm() shall be callable from tasks and ISRs","SetAbsAlarm() shall be callable from tasks and ISRs. [OSEK115]","Ken Tindell","03/08/2007 12:58 PM","02/05/2008 12:57 PM","02/05/2008 12:57 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1198/"
"artf1199","E_OS_STATE returned from SetAbsAlarm()","SetAbsAlarm() shall in standard status return E_OS_STATE if the alarm is in use or E_OK if no other errors. [OSEK116]
","Ken Tindell","03/08/2007 12:59 PM","02/05/2008 1:00 PM","02/05/2008 1:00 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1199/"
"artf1200","E_OS_VALUE returned from SetAbsAlarm()","SetAbsAlarm() shall in extended status return E_OS_VALUE if the values of the increment or cycle parameters are out of range. [OSEK117]
","Ken Tindell","03/08/2007 1:00 PM","02/05/2008 1:01 PM","02/05/2008 1:01 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1200/"
"artf1203","E_OS_NOFUNC returned from CancelAlarm()","CancelAlarm() shall in standard status return E_OS_NOFUNC if the alarm is not in use or E_OK if no other errors. [OSEK120]","Ken Tindell","03/08/2007 1:01 PM","02/05/2008 1:09 PM","02/05/2008 1:09 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1203/"
"artf1201","CancelAlarm() shall cancel the running alarm","CancelAlarm() shall cancel the running alarm. [OSEK118]
","Ken Tindell","03/08/2007 1:00 PM","02/05/2008 1:11 PM","02/05/2008 1:11 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1201/"
"artf1187","GetAlarm() behaviour","GetAlarm() shall, if the alarm is in use, indicate the number of ticks to expiry (via a passed reference). See 13.6.3.2 p63 (doc1002). [OSEK104]
","Ken Tindell","03/08/2007 12:45 PM","02/05/2008 1:14 PM","02/05/2008 1:14 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1187/"
"artf1202","CancelAlarm() shall be callable from tasks and ISRs","CancelAlarm() shall be callable from tasks and ISRs. [OSEK119]","Ken Tindell","03/08/2007 1:00 PM","02/05/2008 1:28 PM","02/05/2008 1:28 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1202/"
"artf1205","Counter constants generated by configuration tool","Constants of the form OSMAXALLOWEDVALUE_x, OSTICKSPERBASE_x and OSMINCYCLE_x shall be generated for each counter x for the corresponding values returned by GetAlarmBase(). [OSEK122]","Ken Tindell","03/08/2007 1:02 PM","02/05/2008 2:01 PM","02/05/2008 2:01 PM","OSEK OS","Tested","","4","None","No","http://10.211.55.3/sf/go/artf1205/"
"artf1132","E_OS_RESOURCE returned from TerminateTask()","TerminateTask() shall return E_OS_RESOURCE to the caller in extended status if the task is holding non-internal resources. [OSEK048].","Ken Tindell","03/08/2007 11:46 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1132/"
"artf1130","TerminateTask() shall terminate the calling task","TerminateTask() shall terminate the calling task, put the task state into SUSPENDED, and effect a reschedule. [OSEK046]","Ken Tindell","03/08/2007 11:45 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1130/"
"artf1137","E_OS_CALLEVEL returned from Schedule()","Schedule() shall in extended status return E_OS_CALLEVEL if called from a hook or ISR. [OSEK053]","Ken Tindell","03/08/2007 11:49 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1137/"
"artf1127","E_OS_LIMIT returned from ActivateTask()","ActivateTask() shall return E_OS_LIMIT in both standard and extended status if the number of outstanding task activations exceeds the predetermined limit. If E_OS_LIMIT is returned then the activation is ignored. [OSEK043]
","Ken Tindell","03/08/2007 11:43 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1127/"
"artf1133","E_OS_CALLEVEL returned from TerminateTask()","TerminateTask() shall return E_OS_CALLEVEL to the caller in extended status if the caller is an interrupt service routine or hook function. See 13.2.3.2 p51 (doc1002). [OSEK049].","Ken Tindell","03/08/2007 11:47 AM","01/09/2008 8:17 PM","01/09/2008 8:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1133/"
"artf1142","E_OS_ID returned from GetTaskState()","GetTaskState() shall in extended status return E_OS_ID if the parameter specifying the task is invalid and shall set the corresponding state to INVALID_TASK. [OSEK058]
","Ken Tindell","03/08/2007 11:51 AM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1142/"
"artf1165","E_OS_ID returned from SetEvent()","SetEvent() shall in extended status return E_OS_ID if the specified task is invalid. 13.5.3.1 p60 (doc1002). [OSEK082]","Ken Tindell","03/08/2007 12:31 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1165/"
"artf1326","E_OS_ID returned from ReleaseResource","E_OS_ID returned from ReleaseResource for an invalid resource handle. See 13.4.3.2 doc1002.","Ken Tindell","03/15/2007 3:31 PM","01/09/2008 8:19 PM","01/09/2008 8:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1326/"
"artf1183","GetAlarmBase() structure definition","GetAlarmBase() shall use a reference to a structure defined in 13.6.1 to indicate static details of the given alarm. See 13.6.3.1 p63 (doc1002). [OSEK100]","Ken Tindell","03/08/2007 12:43 PM","02/05/2008 2:02 PM","02/05/2008 2:02 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1183/"
"artf1184","GetAlarmBase() call environment","GetAlarmBase() shall be callable from tasks, category 2 ISRs and some hooks (see Figure 12). See also 13.6.3.1 p63 (doc1002). [OSEK101]","Ken Tindell","03/08/2007 12:44 PM","02/05/2008 2:05 PM","02/05/2008 2:05 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1184/"
"artf1038","Autoterminate on return from task entry function","If a task returns from its entry function without making a TerminateTask() or ChainTask() call, the Operating System shall terminate the task (and call the PostTaskHook if configured). [OS052]
","Ken Tindell","03/05/2007 10:00 PM","02/09/2008 6:13 PM","02/09/2008 6:13 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1038/"
"artf1227","Shutdown hook declaration","The shutdown hook shall be declared as specified in 13.8.2.5 p69 (doc1002). [OSEK144]","Ken Tindell","03/08/2007 1:21 PM","02/11/2008 4:26 PM","02/11/2008 4:26 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1227/"
"artf1108","Alarm callback prototype","The prototype for an alarm callback function shall be as defined in 9.3 p37 (doc1002). [OSEK024]","Ken Tindell","03/08/2007 11:28 AM","02/05/2008 2:19 PM","02/05/2008 2:19 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1108/"
"artf1211","Alarm callbacks run at OS level","Alarm callback functions shall run at OS level (i.e. the level where all category 2 ISRs will not be handled). See 9.2 p36 (doc1002). [OSEK128]","Ken Tindell","03/08/2007 1:10 PM","02/05/2008 2:34 PM","02/05/2008 2:34 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1211/"
"artf1104","Multiple alarms bound to a counter","The RTOS shall support multiple alarms bound to a given counter. See 9.2 p36 (doc1002). [OSEK020]","Ken Tindell","03/08/2007 11:26 AM","02/05/2008 2:14 PM","02/05/2008 2:14 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1104/"
"artf1126","ActivateTask() clears events","ActivateTask() shall clear the events of the task if it is an extended task. [OSEK042]
","Ken Tindell","03/08/2007 11:43 AM","02/08/2008 2:07 PM","02/08/2008 2:07 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1126/"
"artf1220","ShutdownOS() shall stop counter ISRs","ShutdownOS() shall ensure that the counters will not run category 2 ISRs after the StartOS() call returns. This is an extension to the OSEK spec. [OSEK137].","Ken Tindell","03/08/2007 1:17 PM","02/05/2008 2:18 PM","02/05/2008 2:18 PM","OSEK OS","Deleted","","4","None","No","http://10.211.55.3/sf/go/artf1220/"
"artf1231","DeclareTask()","The DeclareTask() constructional element shall be provided. [OSEK148]","Ken Tindell","03/08/2007 1:26 PM","02/08/2008 2:43 PM","02/08/2008 2:43 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1231/"
"artf1106","Alarm callback and interrupt services","The system services SuspendAllInterrupts() and ResumeAllInterrupts() shall be callable from an alarm callback. See figure 12.1 p45 (doc1002). [OSEK022]","Ken Tindell","03/08/2007 11:27 AM","02/05/2008 2:36 PM","02/05/2008 2:36 PM","OSEK OS","Replaced","","4","None","Yes","http://10.211.55.3/sf/go/artf1106/"
"artf1233","DeclareEvent()","The DeclareEvent() constructional element shall be provided. [OSEK150]","Ken Tindell","03/08/2007 1:26 PM","02/08/2008 2:44 PM","02/08/2008 2:44 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1233/"
"artf1206","Standard system counter constants","A standard time-based system counter shall exist and this shall have constants named OSMAXALLOWEDVALUE, OSTICKSPERBASE, OSMINCYCLE. [OSEK123]
","Ken Tindell","03/08/2007 1:04 PM","02/05/2008 2:50 PM","02/05/2008 2:50 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1206/"
"artf1045","API calls protected with E_OS_DISABLEDINT","If interrupts are disabled and any OS services, excluding the interrupt services, are called outside of hook routines, then the Operating System shall return E_OS_DISABLEDINT. [OS093]

This has been interpreted to mean in extended status only (otherwise the standard status code would slow down tremendously). Also the term ""interrupts are disabled"" is vague and in some interpretations is meaningless (since an API call can be called from an ISR sometimes; also tasks can have interrupts locked due to sharing a resource with an ISR). The interpretation of ""interrupts are disabled"" is taken to mean ""via the SuspendAllInterrupts, DisableAllInterrupts and SuspendOSInterrupts"" calls, since it is indeed illegal to call API calls after these.","Ken Tindell","03/05/2007 10:05 PM","02/09/2008 6:16 PM","02/09/2008 6:16 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1045/"
"artf1096","FIFO scheduling within each priority","The scheduler shall provide a priority preemptive dispatcher using a FIFO scheme within each priority with each activation treated as a separate queue operation. See section 4.5 of OS spec (doc1002). [OSEK012]","Ken Tindell","03/08/2007 11:19 AM","02/09/2008 6:22 PM","02/09/2008 6:22 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1096/"
"artf1085","The RTOS shall support OSEK ECC2.","The RTOS shall support OSEK ECC2. See 3-3 p14 of OSEK OS spec 2.2.3 (doc1002). [OSEK001]","Ken Tindell","03/08/2007 10:57 AM","02/09/2008 6:20 PM","02/09/2008 6:20 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1085/"
"artf1095","Task starting point","After activation the task is ready to execute from the first statement. See section 4.3 of OS spec (doc1002) [OSEK011]

","Ken Tindell","03/08/2007 11:18 AM","02/09/2008 6:20 PM","02/09/2008 6:20 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1095/"
"artf1101","Resources are shareable between tasks and ISRs","The RTOS shall support resources shared between tasks and ISRs according to the protocol defined in 8.6 p32 (doc1002). [OSEK017]
","Ken Tindell","03/08/2007 11:23 AM","02/09/2008 6:26 PM","02/09/2008 6:26 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1101/"
"artf1100","RES_SCHEDULER automatically generated","A resource called RES_SCHEDULER shall be automatically generated with a ceiling priority equal to the priority of the highest priority task. [OSEK016]
","Ken Tindell","03/08/2007 11:22 AM","02/09/2008 6:23 PM","02/09/2008 6:23 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1100/"
"artf1110","Hook functions run at ISR level","Hook functions shall run with ISR category 2 interrupts disabled. See 11.1 39 (doc1002). [OSEK026]","Ken Tindell","03/08/2007 11:30 AM","02/09/2008 6:53 PM","02/09/2008 6:53 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1110/"
"artf1042","Autorelease of resources on termination","If a task returns from the entry function without making a TerminateTask() or ChainTask() call and still holds OSEK Resources, the Operating System shall release them. [OS070]
","Ken Tindell","03/05/2007 10:02 PM","02/09/2008 6:11 PM","02/09/2008 6:11 PM","AUTOSAR OS 2.0","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1042/"
"artf1124","OS_SYS_ codes","Internal OS-specific error codes shall begin with the prefix “OS_SYS_”. See 13.1 p49 (doc1002). [OSEK040]
","Ken Tindell","03/08/2007 11:42 AM","02/10/2008 10:43 PM","02/10/2008 10:43 PM","OSEK OS","Reviewed","","4","None","Yes","http://10.211.55.3/sf/go/artf1124/"
"artf1222","Error hook declaration","The error hook shall be declared as specified in 13.8.2.1 p68 (doc1002). [OSEK139]","Ken Tindell","03/08/2007 1:19 PM","02/10/2008 10:46 PM","02/10/2008 10:46 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1222/"
"artf1162","SetEvent() callable from ISR level","SetEvent() shall be callable from a task or an ISR. See 13.5.3.1 p59 (doc1002). [OSEK079].
","Ken Tindell","03/08/2007 12:29 PM","02/10/2008 10:55 PM","02/10/2008 10:55 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1162/"
"artf1123","Error code values","The 8 standard error codes specified in 13.1 p49 (doc1002) shall have the numeric values as specified. [OSEK039]
","Ken Tindell","03/08/2007 11:41 AM","02/10/2008 11:17 PM","02/10/2008 11:17 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1123/"
"artf1229","OSErrorGetServiceId() returning pre-defined constants","OSErrorGetServiceId() shall return pre-defined constants of the form OSServiceId_x where x represents the name of the API call. See 13.8.4 p69 and 11.1 p41 (doc1002). [OSEK146]","Ken Tindell","03/08/2007 1:25 PM","02/11/2008 12:11 AM","02/11/2008 12:11 AM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1229/"
"artf1224","PreTaskHook declaration","The pre-task hook shall be declared as specified in 13.8.2.2 p68 (doc1002). [OSEK141]
","Ken Tindell","03/08/2007 1:20 PM","02/11/2008 4:23 PM","02/11/2008 4:23 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1224/"
"artf1226","Startup hook declaration","The startup hook shall be declared as specified in 13.8.2.4 p69 (doc1002). [OSEK143]","Ken Tindell","03/08/2007 1:21 PM","02/11/2008 4:25 PM","02/11/2008 4:25 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1226/"
"artf1178","WaitEvent() behaviour","WaitEvent() shall, if the task is placed in the WAITING state, release any internal resources and invoke the scheduler to run the highest priority. See 13.5.3.4 p61 (doc1002). [OSEK095]
","Ken Tindell","03/08/2007 12:40 PM","02/11/2008 4:31 PM","02/11/2008 4:31 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1178/"
"artf1213","GetActiveApplicationMode() behaviour","GetActiveApplicationMode() shall return the active application mode. [OSEK130]","Ken Tindell","03/08/2007 1:11 PM","02/11/2008 4:35 PM","02/11/2008 4:35 PM","OSEK OS","Tested","","4","None","Yes","http://10.211.55.3/sf/go/artf1213/"
